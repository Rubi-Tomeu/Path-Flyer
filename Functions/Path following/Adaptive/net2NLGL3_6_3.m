function [Y,Xf,Af] = net2NLGL3_6_3(X,~,~)
%NETTOT3_6_3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Oct-2017 17:43:05.
% 
% [Y] = netTOT3_6_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0.196965951059079;0.5];
x1_step1_gain = [0.604214506263955;0.102564102564103];
x1_step1_ymin = -1;

% Layer 1
b1 = [1.3497292959396012;-2.4730221640060517;1.0246526209538498];
IW1_1 = [1.164609751247164 0.0013043059053045485;2.4405324459018547 -4.520762426616975;-0.73031513708280149 -0.018046762206316229];

% Layer 2
b2 = [3.6172545754266041;-1.3423442589321208;-3.4067202946104453;-0.29459827109367714;6.2620185704451075;-1.5211125046327361];
LW2_1 = [2.261140498612102 2.1831375226266521 -2.5539471990141349;2.4091493278806797 0.67022163508411747 1.8023077883832987;4.8494887912192777 -1.1449061840162356 0.69964699867625824;0.5663866031936573 0.033241113391199353 -0.77709099861979469;3.8205400447387139 9.3128369371630626 -2.473905530189076;4.3865402222664311 -1.2464094367852554 -0.8449316694195611];

% Layer 3
b3 = [-0.11651132067903541;-1.2526437480945318;-1.3698363917987249];
LW3_2 = [-0.16373709091245695 0.75125574426987585 -0.15150834195202389 0.86733641087778335 0.016109892126148644 0.19106133614248869;-1.2630034728531567 -3.0321888689550671 -0.61355323786115723 0.99258564889808976 -0.3602972138343325 -3.672619040071436;3.1914937606172811 -3.6979057690864745 -3.7778031721866352 3.1400575467484666 0.41929354053476758 2.45347268617697];

% Layer 4
b4 = 0.032461048032677235;
LW4_3 = [6.1707808093852101 -4.1925442207561554 5.3159058159544257];

% Output 1
y1_step1_ymin = 0;
y1_step1_gain = 0.179533213644526;
y1_step1_xoffset = 0.25;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = logsig_apply(repmat(b4,1,Q) + LW4_3*a3);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
